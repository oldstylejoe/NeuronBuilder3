package neuronbuilder;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.BasicStroke;
import java.util.ArrayList;
/**
 * Visual display of building neuron.
 * @author Leo Zhou
 */
public class PunctaDisplay extends javax.swing.JPanel {

    private int punctaSize, removeRadius, xc, yc, wid, hei;
    private Point[] punctaPos;
    private Root[] rootPos;
    private ArrayList<Point> occupiedPunctaPos, availablePunctaPos;
    private ArrayList<Branch> branchPos;
    private ArrayList<int[]> convex;
    private Stroke stroke, originalStroke, enclosureStroke;

    public PunctaDisplay() {
        punctaSize = 0;
        removeRadius = 0;
        punctaPos = new Point[0];
        rootPos = new Root[0];
        occupiedPunctaPos = new ArrayList<Point>(0);
        availablePunctaPos = new ArrayList<Point>(0);
        branchPos = new ArrayList<Branch>(0);
        convex = new ArrayList<int[]>(0);
        stroke = new BasicStroke(3);
        originalStroke = new BasicStroke(1);
        enclosureStroke = new BasicStroke(3, BasicStroke.CAP_BUTT,
                BasicStroke.JOIN_BEVEL,0,new float[]{5}, 0);
        initComponents();
        setSize(700,700);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        setPreferredSize(new java.awt.Dimension(580, 420));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 576, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    protected void paintComponent(Graphics gr) {
        super.paintComponent(gr);
        Graphics2D g = (Graphics2D)gr;

        g.setColor(Color.gray.brighter());
        for (int i = 0; i < punctaPos.length; i++)
            g.fillOval(punctaPos[i].x - punctaSize/2,
                    punctaPos[i].y - punctaSize/2,
                    punctaSize, punctaSize);

        g.setColor(Color.darkGray);
        for (int i = 0; i < availablePunctaPos.size(); i++)
        {
            Point pt = availablePunctaPos.get(i);
            g.fillOval(pt.x - punctaSize/2, pt.y - punctaSize/2,
                    punctaSize, punctaSize);
        }

        for (int i = 0; i < rootPos.length; i++)
            rootPos[i].draw(g);

        g.setColor(Color.orange);
        int x, y;
        for (int i = 0; i < occupiedPunctaPos.size(); i++)
        {
            Point ocPos = occupiedPunctaPos.get(i);
            x = ocPos.x;
            y = ocPos.y;
//            g.fillOval(x - punctaSize/2, y - punctaSize/2,
//                    punctaSize, punctaSize);
            g.drawOval(x - removeRadius, y - removeRadius,
                    2 * removeRadius, 2 * removeRadius);
        }

        g.setStroke(stroke);
        for (int i = 0; i < branchPos.size(); i++)
        {
            Branch branch = branchPos.get(i);
            if (branch != null)
              branch.draw(g);
        }

        g.setColor(new Color(0,0,1,.6F));
        g.setStroke(enclosureStroke);
        g.drawOval(xc - wid/2, yc - hei/2, wid, hei); // draw MEC
        drawConvexHull(g);
        g.setStroke(originalStroke);
    }

    public void drawBase(int size, Point[] pos, ArrayList<Point> avail, Root[] root) {
        punctaSize = size;
        punctaPos = pos;
        availablePunctaPos = avail;
        rootPos = root;
        repaint();
    }

    public void setParameters(int ps, int rr, int width) {
        punctaSize = ps;
        removeRadius = rr;
        stroke = new BasicStroke(width);
        enclosureStroke = new BasicStroke(width, BasicStroke.CAP_BUTT,
                BasicStroke.JOIN_BEVEL,0,new float[]{5}, 0);
    }

    public void update(ArrayList<Point> occupied, ArrayList<Point> avail, ArrayList<Branch> branch) {
        occupiedPunctaPos = occupied;
        availablePunctaPos = avail;
        branchPos = branch;
        repaint();
    }

    public void setEnclosure(double x, double y, double w, double h) {
        xc = (int)(x+.5);
        yc = (int)(y+.5);
        wid = (int)(w+.5);
        hei = (int)(h+.5);
    }

    public void setConvexHull(ArrayList<int[]> conv) {
        convex = conv;
    }

    public void drawConvexHull(Graphics2D g) {
        for (int i = 0; i < convex.size(); i++)
            g.drawLine(convex.get(i)[0], convex.get(i)[1],
                    convex.get((i+1)%convex.size())[0], convex.get((i+1)%convex.size())[1]);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
